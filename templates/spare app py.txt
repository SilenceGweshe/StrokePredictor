from flask import Flask, request, jsonify, render_template
import joblib
import sqlite3
import traceback
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

app = Flask(__name__)

# Load the trained model
try:
    model = joblib.load('stroke_model.pkl')
    print("✅ Model loaded successfully.")
except Exception as e:
    print("❌ Failed to load model:")
    traceback.print_exc()
    model = None

# Initialize SQLite database
def init_db():
    conn = sqlite3.connect('stroke_predictions.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS predictions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            age REAL,
            hypertension INTEGER,
            heart_disease INTEGER,
            avg_glucose_level REAL,
            bmi REAL,
            gender TEXT,
            work_type TEXT,
            smoking_status TEXT,
            risk_score REAL,
            prediction INTEGER,
            risk_level TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# 👇 Instruction page route (home)
@app.route('/')
def instructions():
    return render_template('instructions.html')

# 👇 Form page route
@app.route('/form', methods=['GET', 'POST'])
def form():
    return render_template('form.html')

# 👇 Prediction API
@app.route('/predict', methods=['POST'])
def predict():
    try:
        if request.is_json:
            data = request.get_json()
        else:
            data = request.form.to_dict()

        required_fields = ['age', 'hypertension', 'heart_disease', 'avg_glucose_level', 'bmi', 'gender', 'work_type', 'smoking_status']
        for field in required_fields:
            if field not in data:
                return jsonify({'error': f'Missing field: {field}'}), 400

        input_data = [[
            float(data['gender']),
            float(data['age']),
            float(data['hypertension']),
            float(data['heart_disease']),
            float(data['work_type']),
            float(data['avg_glucose_level']),
            float(data['bmi']),
            float(data['smoking_status']),
            float(data['age']) * float(data['avg_glucose_level'])
        ]]

        proba = model.predict_proba(input_data)
        risk_score = proba[0][1]
        prediction = 1 if risk_score > 0.7 else 0
        risk_level = 'High' if prediction == 1 else 'Low'

        conn = sqlite3.connect('stroke_predictions.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO predictions (
                age, hypertension, heart_disease, avg_glucose_level,
                bmi, gender, work_type, smoking_status, risk_score,
                prediction, risk_level
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            data['age'], data['hypertension'], data['heart_disease'], data['avg_glucose_level'],
            data['bmi'], data['gender'], data['work_type'], data['smoking_status'],
            risk_score, prediction, risk_level
        ))
        conn.commit()
        conn.close()

        return jsonify({
            'risk_score': round(risk_score, 4),
            'prediction': prediction,
            'risk_level': risk_level
        })

    except Exception as e:
        traceback.print_exc()
        return jsonify({'error': 'An error occurred during prediction.'}), 500

# 👇 Run the app
if __name__ == '__main__':
    app.run(debug=True)
